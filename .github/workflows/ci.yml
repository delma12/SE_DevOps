name: Run main.py

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: pip
  
      - name: Install dependencies
        run: pip install -r requirements.txt

  linting:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Linting (Flake8)
        run: pip install flake8 && flake8 --max-line-length=127 --exclude tests,.venv,venv . 

      # - name: Run Import Sorting (isort)
      #   run: pip install isort && isort --check-only --skip tests .

      - name: Format Code (Black)
        run: pip install black && black --check .

     
      

  Security_scan:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "Apprentice Management System"
          path: "."
          format: "HTML"
        continue-on-error: true

      - name: Run Security Scan (Bandit)
        run: pip install bandit &&  bandit -r . --severity-level high
    
      - name: Check Dependency Security (Safety)
        run: pip install safety && scan
        continue-on-error: true #allowing this to continue as this informs dependency security issues but none of them can be fixed so its kept in for awareness

  codeql_analysis:
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  tests:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: pip
  
      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run Unit Tests
        run: pytest --disable-warnings

  deploy:
    needs: [setup, linting, Security_scan, codeql_analysis, tests]  # Ensure all jobs must pass before deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to Render
        if: success()  
        run: |
          curl -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json"
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}


        